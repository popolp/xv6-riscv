diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..81ab260
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "user.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 328f9c6..99b1671 100644
--- a/Makefile
+++ b/Makefile
@@ -62,6 +62,7 @@ CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
 CFLAGS += -I.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+CFLAGS += -D$(SCHEDFLAG)
 
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
@@ -132,6 +133,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_syscall\
+	$U/_env_freq\
+	$U/_env\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +157,11 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
+endif
+
+ifndef SCHEDFLAG
+SCHEDFLAG := DEFAULT
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/Makefile b/kernel/Makefile
new file mode 100644
index 0000000..7fd5c3b
--- /dev/null
+++ b/kernel/Makefile
@@ -0,0 +1,179 @@
+K=kernel
+U=user
+
+OBJS = \
+  $K/entry.o \
+  $K/start.o \
+  $K/console.o \
+  $K/printf.o \
+  $K/uart.o \
+  $K/kalloc.o \
+  $K/spinlock.o \
+  $K/string.o \
+  $K/main.o \
+  $K/vm.o \
+  $K/proc.o \
+  $K/swtch.o \
+  $K/trampoline.o \
+  $K/trap.o \
+  $K/syscall.o \
+  $K/sysproc.o \
+  $K/bio.o \
+  $K/fs.o \
+  $K/log.o \
+  $K/sleeplock.o \
+  $K/file.o \
+  $K/pipe.o \
+  $K/exec.o \
+  $K/sysfile.o \
+  $K/kernelvec.o \
+  $K/plic.o \
+  $K/virtio_disk.o
+
+# riscv64-unknown-elf- or riscv64-linux-gnu-
+# perhaps in /opt/riscv/bin
+#TOOLPREFIX = 
+
+# Try to infer the correct TOOLPREFIX if not set
+ifndef TOOLPREFIX
+TOOLPREFIX := $(shell if riscv64-unknown-elf-objdump -i 2>&1 | grep 'elf64-big' >/dev/null 2>&1; \
+	then echo 'riscv64-unknown-elf-'; \
+	elif riscv64-linux-gnu-objdump -i 2>&1 | grep 'elf64-big' >/dev/null 2>&1; \
+	then echo 'riscv64-linux-gnu-'; \
+	elif riscv64-unknown-linux-gnu-objdump -i 2>&1 | grep 'elf64-big' >/dev/null 2>&1; \
+	then echo 'riscv64-unknown-linux-gnu-'; \
+	else echo "***" 1>&2; \
+	echo "*** Error: Couldn't find a riscv64 version of GCC/binutils." 1>&2; \
+	echo "*** To turn off this error, run 'gmake TOOLPREFIX= ...'." 1>&2; \
+	echo "***" 1>&2; exit 1; fi)
+endif
+
+QEMU = qemu-system-riscv64
+
+CC = $(TOOLPREFIX)gcc
+AS = $(TOOLPREFIX)gas
+LD = $(TOOLPREFIX)ld
+OBJCOPY = $(TOOLPREFIX)objcopy
+OBJDUMP = $(TOOLPREFIX)objdump
+
+CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb
+CFLAGS += -MD
+CFLAGS += -mcmodel=medany
+CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
+CFLAGS += -I.
+CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+CFLAGS += -D $(SCHEDFLAG)
+
+# Disable PIE when possible (for Ubuntu 16.10 toolchain)
+ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
+CFLAGS += -fno-pie -no-pie
+endif
+ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]nopie'),)
+CFLAGS += -fno-pie -nopie
+endif
+
+LDFLAGS = -z max-page-size=4096
+
+$K/kernel: $(OBJS) $K/kernel.ld $U/initcode
+	$(LD) $(LDFLAGS) -T $K/kernel.ld -o $K/kernel $(OBJS) 
+	$(OBJDUMP) -S $K/kernel > $K/kernel.asm
+	$(OBJDUMP) -t $K/kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $K/kernel.sym
+
+$U/initcode: $U/initcode.S
+	$(CC) $(CFLAGS) -march=rv64g -nostdinc -I. -Ikernel -c $U/initcode.S -o $U/initcode.o
+	$(LD) $(LDFLAGS) -N -e start -Ttext 0 -o $U/initcode.out $U/initcode.o
+	$(OBJCOPY) -S -O binary $U/initcode.out $U/initcode
+	$(OBJDUMP) -S $U/initcode.o > $U/initcode.asm
+
+tags: $(OBJS) _init
+	etags *.S *.c
+
+ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o
+
+_%: %.o $(ULIB)
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $@ $^
+	$(OBJDUMP) -S $@ > $*.asm
+	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
+
+$U/usys.S : $U/usys.pl
+	perl $U/usys.pl > $U/usys.S
+
+$U/usys.o : $U/usys.S
+	$(CC) $(CFLAGS) -c -o $U/usys.o $U/usys.S 
+
+$U/_forktest: $U/forktest.o $(ULIB)
+	# forktest has less library code linked in - needs to be small
+	# in order to be able to max out the proc table.
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $U/_forktest $U/forktest.o $U/ulib.o $U/usys.o
+	$(OBJDUMP) -S $U/_forktest > $U/forktest.asm
+
+mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
+	gcc -Werror -Wall -I. -o mkfs/mkfs mkfs/mkfs.c
+
+# Prevent deletion of intermediate files, e.g. cat.o, after first build, so
+# that disk image changes after first build are persistent until clean.  More
+# details:
+# http://www.gnu.org/software/make/manual/html_node/Chained-Rules.html
+.PRECIOUS: %.o
+
+UPROGS=\
+	$U/_cat\
+	$U/_echo\
+	$U/_forktest\
+	$U/_grep\
+	$U/_init\
+	$U/_kill\
+	$U/_ln\
+	$U/_ls\
+	$U/_mkdir\
+	$U/_rm\
+	$U/_sh\
+	$U/_stressfs\
+	$U/_usertests\
+	$U/_grind\
+	$U/_wc\
+	$U/_zombie\
+	$U/_syscall\
+	$U/_env\
+
+fs.img: mkfs/mkfs README $(UPROGS)
+	mkfs/mkfs fs.img README $(UPROGS)
+
+-include kernel/*.d user/*.d
+
+clean: 
+	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
+	*/*.o */*.d */*.asm */*.sym \
+	$U/initcode $U/initcode.out $K/kernel fs.img \
+	mkfs/mkfs .gdbinit \
+        $U/usys.S \
+	$(UPROGS)
+
+# try to generate a unique GDB port
+GDBPORT = $(shell expr `id -u` % 5000 + 25000)
+# QEMU's gdb stub command line changed in 0.11
+QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
+	then echo "-gdb tcp::$(GDBPORT)"; \
+	else echo "-s -p $(GDBPORT)"; fi)
+ifndef CPUS
+CPUS := 3
+endif
+
+ifndef SCHEDFLAG
+SCHEDFLAG := DEFAU
+endif
+
+QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
+QEMUOPTS += -drive file=fs.img,if=none,format=raw,id=x0
+QEMUOPTS += -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0
+
+qemu: $K/kernel fs.img
+	$(QEMU) $(QEMUOPTS)
+
+.gdbinit: .gdbinit.tmpl-riscv
+	sed "s/:1234/:$(GDBPORT)/" < $^ > $@
+
+qemu-gdb: $K/kernel .gdbinit fs.img
+	@echo "*** Now run 'gdb' in another window." 1>&2
+	$(QEMU) $(QEMUOPTS) -S $(QEMUGDB)
+
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..ba65779 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -94,6 +94,9 @@ struct cpu*     mycpu(void);
 struct cpu*     getmycpu(void);
 struct proc*    myproc();
 void            procinit(void);
+void            default_scheduler(void) __attribute__((noreturn));
+void            SJF_scheduler(void) __attribute__((noreturn));
+void            FCFS_scheduler(void) __attribute__((noreturn));
 void            scheduler(void) __attribute__((noreturn));
 void            sched(void);
 void            sleep(void*, struct spinlock*);
@@ -104,6 +107,10 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             pause_system(int);
+int             kill_system(void);
+void            print_stats(void);
+int             get_utilization(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -141,6 +148,8 @@ void            syscall();
 
 // trap.c
 extern uint     ticks;
+extern uint     pause_ticks;
+extern uint     current_ticks;
 void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
diff --git a/kernel/env.c b/kernel/env.c
new file mode 100644
index 0000000..285b2fb
--- /dev/null
+++ b/kernel/env.c
@@ -0,0 +1,56 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+void env(int size, int interval, char* env_name) {
+    int result = 1;
+    int loop_size = 1000000000;
+    for (int i = 0; i < loop_size; i++) {
+        if (i % interval == 0) {
+            result = result * size;
+        }
+    }
+}
+
+void env_large() {
+    env(100000000, 1000000000, "env_large");
+}
+
+void env_freq() {
+    env(100, 100, "env_freq");
+}
+
+int
+main(int argc, char *argv[])
+{
+    int n_forks = 2;
+    int pid = getpid();
+    for (int i = 0; i < n_forks; i++) {
+        fork();
+    }
+    int larges = 0;
+    int freqs = 0;
+    int n_experiments = 3;
+    for (int i = 0; i < n_experiments; i++) {
+        env_large(10, 3, 100);
+        if (pid == getpid()) {
+            printf("experiment %d/%d\n", i + 1, n_experiments);
+            larges += get_utilization();
+        }
+        sleep(10);
+        env_freq(10, 100);
+        if (pid == getpid()) {
+            freqs += get_utilization();
+        }
+    }
+    if (pid == getpid()) {
+        printf("larges = %d\nfreqs = %d\n", larges / n_experiments, freqs / n_experiments);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..e0f73ae 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -12,6 +12,21 @@ struct proc proc[NPROC];
 
 struct proc *initproc;
 
+int sh_pid = 2;
+uint rate = 5;
+
+uint sleeping_processes_mean = 0;
+uint running_processes_mean = 0;
+uint runnable_processes_mean = 0;
+int processes_num = 0;
+
+struct spinlock process_exit_lock; // lock for calculating procceses mean
+
+uint program_time = 0;
+uint start_time;
+uint cpu_utilization;
+
+int pause_seconds = 0; // number of seconds the system should pause
 int nextpid = 1;
 struct spinlock pid_lock;
 
@@ -47,13 +62,14 @@ void
 procinit(void)
 {
   struct proc *p;
-  
+
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
       p->kstack = KSTACK((int) (p - proc));
-  }
+  }  
+  start_time = ticks;
 }
 
 // Must be called with interrupts disabled,
@@ -164,6 +180,14 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->last_ticks = 0;
+  p->mean_ticks = 0;
+  p->last_runnable_time = 0;
+  p->should_run = 0;
+  p->sleeping_time = 0;
+  p->runnable_time = 0;
+  p->running_time = 0;
+  p->state_time = 0;
 }
 
 // Create a user page table for a given process,
@@ -243,7 +267,7 @@ userinit(void)
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
-
+  p->last_runnable_time = ticks;
   release(&p->lock);
 }
 
@@ -313,6 +337,7 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+  np->last_runnable_time = ticks;
   release(&np->lock);
 
   return pid;
@@ -371,6 +396,22 @@ exit(int status)
   p->xstate = status;
   p->state = ZOMBIE;
 
+
+
+  acquire(&process_exit_lock);
+  
+  p->running_time += (ticks - p->state_time);
+  sleeping_processes_mean = ((sleeping_processes_mean * processes_num) + p->sleeping_time) / (processes_num + 1);
+  runnable_processes_mean = ((runnable_processes_mean * processes_num) + p->runnable_time) / (processes_num + 1);
+  running_processes_mean = ((running_processes_mean * processes_num) + p->running_time) / (processes_num + 1);
+  program_time += p->running_time;
+  cpu_utilization = (program_time * 100) / (ticks - start_time);
+  processes_num++;
+
+  release(&process_exit_lock);
+
+  p->should_run = 0;
+
   release(&wait_lock);
 
   // Jump into the scheduler, never to return.
@@ -427,36 +468,35 @@ wait(uint64 addr)
   }
 }
 
-// Per-CPU process scheduler.
-// Each CPU calls scheduler() after setting itself up.
-// Scheduler never returns.  It loops, doing:
-//  - choose a process to run.
-//  - swtch to start running that process.
-//  - eventually that process transfers control
-//    via swtch back to the scheduler.
 void
-scheduler(void)
-{
+default_scheduler(void){
   struct proc *p;
   struct cpu *c = mycpu();
-  
   c->proc = 0;
+
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
     for(p = proc; p < &proc[NPROC]; p++) {
+      
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+      if(p->state == RUNNABLE && ((ticks - pause_ticks) > (pause_seconds * 10^7) || (p->pid <=sh_pid && p->pid > 0) ))
+      { 
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
+        p->runnable_time += (ticks - p->last_runnable_time);
         p->state = RUNNING;
+        p->state_time = ticks;
+
         c->proc = p;
+
         swtch(&c->context, &p->context);
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
+        
         c->proc = 0;
       }
       release(&p->lock);
@@ -464,6 +504,146 @@ scheduler(void)
   }
 }
 
+void
+SJF_scheduler(void){
+  struct proc *p;
+  struct cpu *c = mycpu();
+  c->proc = 0;
+
+  for(;;){
+    // Avoid deadlock by ensuring that devices can interrupt.
+    intr_on();
+    uint min_proc_ticks = __INT_MAX__;    
+    struct proc *p_mean = proc;
+    int proc_flag = 1;
+    for(p = proc; p < &proc[NPROC]; p++) 
+    {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE){
+        if(p->should_run){
+          p_mean = p;
+          proc_flag = 0;
+        }
+        if(min_proc_ticks > p->mean_ticks && proc_flag)
+        { 
+         min_proc_ticks = p->mean_ticks;
+         p_mean = p;
+        }
+      }
+      release(&p->lock);
+    }
+    
+      acquire(&p_mean->lock);
+      if(p_mean->state == RUNNABLE && ((ticks - pause_ticks) > (pause_seconds * 10^7) || (p_mean->pid <=sh_pid && p_mean->pid > 0) ))
+      { 
+        // Switch to chosen process.  It is the process's job
+        // to release its lock and then reacquire it
+        // before jumping back to us.
+        if(p_mean->pid > sh_pid)
+          p_mean->should_run = 1;      // This process should run until exit or blocked
+
+        p_mean->runnable_time += (ticks - p_mean->last_runnable_time);
+        p_mean->state = RUNNING;
+        p_mean->state_time = ticks;
+        c->proc = p_mean;
+
+        // Save ticks before process runtime
+        acquire(&tickslock);
+        current_ticks = ticks;
+        release(&tickslock);
+
+        swtch(&c->context, &p_mean->context);
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        // Update running length before releasing
+        p_mean->last_ticks = ticks - current_ticks;
+        p_mean->mean_ticks = ((10 - rate) * c->proc->mean_ticks + c->proc->last_ticks * (rate)) / 10;
+        c->proc = 0;
+      }
+      release(&p_mean->lock);
+    }
+}
+
+void
+FCFS_scheduler(void){
+  struct proc *p;
+  struct cpu *c = mycpu();
+  c->proc = 0;
+
+  for(;;){
+    // Avoid deadlock by ensuring that devices can interrupt.
+    intr_on();
+    int FC_ticks = __INT_MAX__;    
+    struct proc *p_FC = proc;
+    int proc_flag = 1;
+    for(p = proc; p < &proc[NPROC]; p++) 
+    {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE){
+        if(p->should_run){
+          p_FC = p;
+          proc_flag = 0;
+        }
+        if(FC_ticks > p->last_runnable_time && proc_flag)
+        { 
+        FC_ticks = p->last_runnable_time;
+        p_FC = p;
+        }
+      }
+      release(&p->lock);
+    }
+    
+      acquire(&p_FC->lock);
+      if(p_FC->state == RUNNABLE && ((ticks - pause_ticks) > (pause_seconds * 10^7) || (p_FC->pid <=sh_pid && p_FC->pid > 0) ))
+      { 
+        // Switch to chosen process.  It is the process's job
+        // to release its lock and then reacquire it
+        // before jumping back to us.
+        if (p_FC->pid > sh_pid)        
+           p_FC->should_run = 1;    // This process should run until exit or blocked
+
+        p_FC->runnable_time += (ticks - p_FC->last_runnable_time);
+        p_FC->state = RUNNING;
+        p_FC->state_time = ticks;
+        c->proc = p_FC;
+
+        swtch(&c->context, &p_FC->context);
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        // Update running length before releasing
+        
+        c->proc = 0;
+      }
+      release(&p_FC->lock);
+    }
+}
+// Per-CPU process scheduler.
+// Each CPU calls scheduler() after setting itself up.
+// Scheduler never returns.  It loops, doing:
+//  - choose a process to run.
+//  - swtch to start running that process.
+//  - eventually that process transfers control
+//    via swtch back to the scheduler.
+void
+scheduler(void)
+{
+
+  #ifdef DEFAULT
+  default_scheduler();
+  #endif
+
+  #ifdef FCFS
+  FCFS_scheduler();
+  #endif
+
+  #ifdef SJF
+  SJF_scheduler();
+  #endif
+
+}
+
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -497,7 +677,9 @@ yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
+  p->running_time += (ticks - p->state_time);
   p->state = RUNNABLE;
+  p->last_runnable_time = ticks;
   sched();
   release(&p->lock);
 }
@@ -540,9 +722,13 @@ sleep(void *chan, struct spinlock *lk)
   acquire(&p->lock);  //DOC: sleeplock1
   release(lk);
 
+  p->running_time += (ticks - p->state_time); 
+
   // Go to sleep.
   p->chan = chan;
   p->state = SLEEPING;
+  p->should_run = 0;
+  p->state_time = ticks;
 
   sched();
 
@@ -565,7 +751,9 @@ wakeup(void *chan)
     if(p != myproc()){
       acquire(&p->lock);
       if(p->state == SLEEPING && p->chan == chan) {
+        p->sleeping_time += (ticks - p->state_time);
         p->state = RUNNABLE;
+        p->last_runnable_time = ticks;
       }
       release(&p->lock);
     }
@@ -586,7 +774,9 @@ kill(int pid)
       p->killed = 1;
       if(p->state == SLEEPING){
         // Wake process from sleep().
+        p->sleeping_time += (ticks - p->state_time);
         p->state = RUNNABLE;
+        p->last_runnable_time = ticks;
       }
       release(&p->lock);
       return 0;
@@ -654,3 +844,48 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+pause_system(int seconds)
+{
+  pause_seconds = seconds;
+  yield();
+  return 0;
+}
+
+int
+kill_system(void)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->pid > sh_pid){
+      p->killed = 1;
+      if(p->state == SLEEPING){
+        // Wake process from sleep().
+        p->sleeping_time += (ticks - p->state_time);
+        p->state = RUNNABLE;
+        p->last_runnable_time = ticks;
+      }
+    }
+    release(&p->lock);
+  }
+  return -1;
+}
+
+void
+print_stats(void)
+{
+  printf("sleeping_processes_mean: %d\n", sleeping_processes_mean);
+  printf("runnable_processes_mean: %d\n", runnable_processes_mean);
+  printf("running_processes_mean: %d\n", running_processes_mean);
+  printf("program_time: %d\n", program_time);
+  printf("cpu_utilization: %d\n", cpu_utilization);
+}
+
+int
+get_utilization(void)
+{
+  return cpu_utilization;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..7b33e61 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -90,8 +90,17 @@ struct proc {
   enum procstate state;        // Process state
   void *chan;                  // If non-zero, sleeping on chan
   int killed;                  // If non-zero, have been killed
+  int paused;                  // If non-zero, have been paused
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  uint last_ticks;
+  uint mean_ticks;
+  uint last_runnable_time;
+  int should_run;             // If none zero the proc should run now
+  uint sleeping_time;
+  uint runnable_time;
+  uint running_time;
+  uint state_time;             // The time that a process gets into SLEEPING/RUNNABLE/RUNNING state
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
@@ -105,4 +114,4 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
-};
+};
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..227df39 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_pause_system(void);
+extern uint64 sys_kill_system(void);
+extern uint64 sys_print_stats(void);
+extern uint64 sys_get_utilization(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +131,10 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_pause_system]   sys_pause_system,
+[SYS_kill_system]   sys_kill_system,
+[SYS_print_stats]   sys_print_stats,
+[SYS_get_utilization]   sys_get_utilization,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..9fc247b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,7 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_pause_system  22
+#define SYS_kill_system  23
+#define SYS_print_stats  24
+#define SYS_get_utilization 25
\ No newline at end of file
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 5dc453b..2464cd2 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -418,7 +418,6 @@ sys_exec(void)
   char path[MAXPATH], *argv[MAXARG];
   int i;
   uint64 uargv, uarg;
-
   if(argstr(0, path, MAXPATH) < 0 || argaddr(1, &uargv) < 0){
     return -1;
   }
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..2bb0303 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -95,3 +95,37 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_pause_system(void)
+{
+  int seconds;
+
+  if(argint(0, &seconds) < 0)
+    return -1;
+
+  acquire(&tickslock);
+  pause_ticks = ticks;
+  release(&tickslock);
+
+  return pause_system(seconds);
+}
+
+uint64
+sys_kill_system(void)
+{
+  return kill_system();
+}
+
+uint64
+sys_print_stats(void)
+{
+  print_stats();
+  return 0;
+}
+
+uint64
+sys_get_utilization(void)
+{
+  return get_utilization();
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..5b51cae 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -8,6 +8,8 @@
 
 struct spinlock tickslock;
 uint ticks;
+uint pause_ticks = 0;
+uint current_ticks = 0;
 
 extern char trampoline[], uservec[], userret[];
 
diff --git a/user/env.c b/user/env.c
new file mode 100644
index 0000000..72fa9f9
--- /dev/null
+++ b/user/env.c
@@ -0,0 +1,60 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+int loop_size = 10000;
+int large_interval = 1000;
+int large_size = 1000;
+int freq_interval = 100;
+int freq_size = 100;
+void env(int size, int interval, char* env_name) {
+    int result = 1;
+    for (int i = 0; i < loop_size; i++) {
+        if (i % interval == 0) {
+            result = result * size;
+        }
+    }
+}
+
+void env_large() {
+    env(large_size, large_interval, "env_large");
+}
+
+void env_freq() {
+    env(freq_size, freq_interval, "env_freq");
+}
+
+int
+main(int argc, char *argv[])
+{
+    int n_forks = 2;
+    int pid = getpid();
+    for (int i = 0; i < n_forks; i++) {
+        fork();
+    }
+    int larges = 0;
+    int freqs = 0;
+    int n_experiments = 10;
+    for (int i = 0; i < n_experiments; i++) {
+        env_large(10, 3, 100);
+        if (pid == getpid()) {
+            printf("experiment %d/%d\n", i + 1, n_experiments);
+            larges = (larges * i + get_utilization()) / (i + 1);
+        }
+        sleep(10);
+        env_freq(10, 100);
+        if (pid == getpid()) {
+            freqs = (freqs * i + get_utilization()) / (i + 1);
+        }
+    }
+    if (pid == getpid()) {
+        printf("larges = %d\nfreqs = %d\n", larges, freqs);
+    }
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/env_freq.c b/user/env_freq.c
new file mode 100644
index 0000000..b6580fd
--- /dev/null
+++ b/user/env_freq.c
@@ -0,0 +1,39 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+void env(int size, int interval, char* env_name) {
+    int is_main = 0;
+    int result = 1;
+    int loop_size = 10e6;
+    int n_forks = 3;
+    int pid;
+    for (int i = 0; i < n_forks; i++) {
+        pid = fork();
+        if(i == 0 && pid != 0){ is_main = 1;}
+        else if(pid == 0) {is_main = 0;}
+    }
+    for (int i = 0; i < loop_size; i++) {
+        if (i % (int)(loop_size / 10e0) == 0) {
+        	if (pid == 0) {
+        		printf("%s %d/%d completed.\n", env_name, i, loop_size);
+        	} else {
+        		printf(" ");
+        	}
+        }
+        if (i % interval == 0) {
+            result = result * size;
+        }
+    }
+    while(wait(0) > 0);         // wait for ALL children processes to exit
+    if(!is_main){ exit(0);}
+    printf("\n");
+}
+
+int main(int argc, char **argv) {
+    print_stats();
+    env(10e1, 10e1, "env_freq");
+    print_stats();
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/syscall.c b/user/syscall.c
new file mode 100644
index 0000000..8e2fc32
--- /dev/null
+++ b/user/syscall.c
@@ -0,0 +1,44 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+void pause_system_dem(int interval, int pause_seconds, int loop_size) {
+    int pid = getpid();
+    for (int i = 0; i < loop_size; i++) {
+        if (i % interval == 0 && pid == getpid()) {
+            printf("pause system %d/%d completed.\n", i, loop_size);
+        }
+        if (i == loop_size / 2) {
+            pause_system(pause_seconds);
+        }
+    }
+    printf("\n");
+}
+
+void kill_system_dem(int interval, int loop_size) {
+    int pid = getpid();
+    for (int i = 0; i < loop_size; i++) {
+        if (i % interval == 0 && pid == getpid()) {
+            printf("kill system %d/%d completed.\n", i, loop_size);
+        }
+        if (i == loop_size / 2) {
+            kill_system();
+        }
+    }
+    printf("\n");
+}
+
+
+int
+main(int argc, char *argv[])
+{
+    pause_system_dem(10, 3, 100);
+    kill_system_dem(10, 100);
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index b71ecda..02de80b 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,10 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int pause_system(int);
+int kill_system(void);
+void print_stats(void);
+int get_utilization(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d96224b 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,7 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("pause_system");
+entry("kill_system");
+entry("print_stats");
+entry("get_utilization");
\ No newline at end of file
